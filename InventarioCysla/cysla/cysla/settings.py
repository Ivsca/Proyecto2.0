"""
Django settings for cysla project.

Generated by 'django-admin startproject' using Django 5.1.7.
"""

import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

# ==========================
# Seguridad y entorno
# ==========================
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-wbtt-n%1bal47qlv@_7)yjh%o8=lc@#^8x$j#=i-rd5hag6fb+"
)

DEBUG = os.environ.get("DEBUG", "False") == "True"

ALLOWED_HOSTS = os.environ.get(
    "DJANGO_ALLOWED_HOSTS",
    "proyecto2-0-zmw7.onrender.com,localhost,127.0.0.1"
).split(",")

# ==========================
# Aplicaciones
# ==========================
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "AppInventario.apps.AppinventarioConfig",  # tu app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # <- WhiteNoise va justo aquí
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = "cysla.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # global templates (opcional)
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "cysla.wsgi.application"
 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'flock',
        'USER': 'root',
        'PASSWORD': 'sOXIePBKCUnjmXqAMZzvbNHFxljTXfPK',
        'HOST': 'gondola.proxy.rlwy.net',
        'PORT': '15899',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        }
    }
}


#region estres de la vida, dolor de cabeza... la base de datos, me tiene cansado 😑😑😑😖🤬🤬🤬🤬


# ==========================
# Base de datos (MySQL)
# ==========================

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": os.environ.get("MYSQLDATABASE", "flock"),
#         "USER": os.environ.get("MYSQLUSER", "root"),
#         "PASSWORD": os.environ.get("MYSQLPASSWORD", ""),
#         "HOST": os.environ.get("MYSQLHOST", "127.0.0.1"),  # valor seguro por defecto
#         "PORT": os.environ.get("MYSQLPORT", "3306"),
#     }
# }

# ==========================
# Base de datos (MySQL)
# ==========================

# DATABASES = {
#     "default": dj_database_url.config(
#         env="MYSQL_PUBLIC_URL",
#         default=f"mysql://{os.environ.get('MYSQLUSER','root')}:{os.environ.get('MYSQLPASSWORD','')}@{os.environ.get('MYSQLHOST','127.0.0.1')}:{os.environ.get('MYSQLPORT','3306')}/{os.environ.get('MYSQLDATABASE','flock')}",
#         conn_max_age=600,
#         ssl_require=False,  # Render y Railway no siempre exigen SSL
#     )
# }

# import dj_database_url

# DATABASES = {
#     "default": dj_database_url.parse(
#         os.environ.get(
#             "MYSQL_PUBLIC_URL",
#             "mysql://root:password@127.0.0.1:3306/flock"
#         ),
#         conn_max_age=600,
#     )
# }

# ==========================
# Base de datos (MySQL)
# ==========================

# (He dejado las opciones comentadas por si las querés conservar)
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": os.environ.get("MYSQLDATABASE", "flock"),
#         "USER": os.environ.get("MYSQLUSER", "root"),
#         "PASSWORD": os.environ.get("MYSQLPASSWORD", ""),
#         "HOST": os.environ.get("MYSQLHOST", "127.0.0.1"),  # valor seguro por defecto
#         "PORT": os.environ.get("MYSQLPORT", "3306"),
#     }
# }

# ==========================
# Base de datos (MySQL)
# ==========================

# import dj_database_url
# from urllib.parse import urlparse

# def _mask_db_url(u: str):
#     try:
#         p = urlparse(u)
#         user = p.username or "user"
#         return f"{p.scheme}://{user}:***@{p.hostname}:{p.port}{p.path}"
#     except Exception:
#         return u

# # Usamos MYSQL_PUBLIC_URL (Railway te da esa variable). Si no existe usamos variables sueltas.
# DB_URL = os.environ.get("MYSQL_PUBLIC_URL") or os.environ.get("DATABASE_URL") or ""

# if DB_URL:
#     # Mostrar en logs la URL enmascarada (aparece en logs de Render/Railway — útil para depurar)
#     print("Usando DB URL:", _mask_db_url(DB_URL))
#     try:
#         DATABASES = {
#             "default": dj_database_url.parse(DB_URL, conn_max_age=600)
#         }
#     except Exception as e:
#         # Si falla el parse, levantamos con detalle para que lo veas en los logs
#         raise RuntimeError(f"Error al parsear MYSQL_PUBLIC_URL ({_mask_db_url(DB_URL)}): {e}")
# else:
#     # Fallback local clásico
#     DATABASES = {
#         "default": {
#             "ENGINE": "django.db.backends.mysql",
#             "NAME": os.environ.get("MYSQLDATABASE", "flock"),
#             "USER": os.environ.get("MYSQLUSER", "root"),
#             "PASSWORD": os.environ.get("MYSQLPASSWORD", ""),
#             "HOST": os.environ.get("MYSQLHOST", "127.0.0.1"),
#             "PORT": os.environ.get("MYSQLPORT", "3306"),
#             "OPTIONS": {"charset": "utf8mb4"},
#         }
#     }

#endregion



# ==========================
# Validadores de contraseñas
# ==========================
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ==========================
# Internacionalización
# ==========================
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ==========================
# Archivos estáticos
# ==========================
STATIC_URL = "/static/"

# Carpeta donde collectstatic recopila archivos para producción
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Carpeta con tus archivos estáticos en desarrollo
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# WhiteNoise (comprime y hace cache busting)
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# ==========================
# Archivos de usuario (uploads)
# ==========================
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# ==========================
# Seguridad en producción
# ==========================
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

CSRF_TRUSTED_ORIGINS = [
    "https://proyecto2-0-zmw7.onrender.com",
]

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# ==========================
# Django 5 default
# ==========================
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# En settings.py - PEGA LA CONTRASEÑA AQUÍ
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'gestorempresa1@gmail.com'
EMAIL_HOST_PASSWORD = 'bbrz gzqp hoxu qraj'  # ← PEGA AQUÍ TU CONTRASEÑA

DEFAULT_FROM_EMAIL = 'gestorempresa1@gmail.com'
SERVER_EMAIL = 'gestorempresa1@gmail.com'

# Sesiones
SESSION_COOKIE_AGE = 1209600
SESSION_SAVE_EVERY_REQUEST = True

# Autenticación
LOGIN_URL = '/Logueo/Plantilla/'
